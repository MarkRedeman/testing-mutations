* Testing mutations

The following is a proof of concept that combines a previous proof of concept
that introduced [[https://github.com/MarkRedeman/ast-based-mutations][mutations with the AST]] with a simple way to test the mutations.

This approach can be used in combination with most popular testing frameworks,
though their speed may vary.

** Testing mutations

Before I explain how this project tests mutations let's summarize how Humbug
currently tests mutations.

Once a mutation has been found Humbug firsts checks whether incremental caching
is enabled, if it is it will check if the mutation's result is cached.
If it isn't cached it will build a process. The building of this process is
actually quite complicated as there are a couple of things we have to know:

1. The location of the phpunit executable
2. Which mutation to run
3. Which test to run
4. How to tell the testing framework to test the mutation

This project mostly focuses on the last part: telling the framework how to test
the mutation.
Humbug creates a special ~phpunit.xml~ file that includes,

- The project under test's ~phpunit.xml~ settings
- Additional test listeners
  - ~JsonLoggingTimeCollectorListener~: this is used to sort test execution
    based on the time the tests take to run
  - ~TestSuiteFilterListener~: this is used so that we only run the tests that
    actually execute the code that has been mutated
- It sets a new ~bootstrap~ file

The approach that I want to try is not using a separate ~phpunit.xml~ file.
Essentially testing a mutation with phpunit boils down to the following command,

#+BEGIN_SRC sh
cat examples/example_mutation.php \
    |  php examples/demo-phpunit/vendor/bin/phpunit \
           --bootstrap examples/example_bootstrap.php
#+END_SRC

where the ~example_bootstrap.php~ file contains the following,

#+BEGIN_SRC php
<?php

require_once __DIR__ . '/demo-phpunit/bootstrap/autoload.php';

eval('?>' . file_get_contents('php://stdin'));
#+END_SRC

Assuming you don't have any manual ~require~ commands in your code
as otherwise we might load a class twice (once in the bootstrap file and once in
your manual ~require~) this works (at least in all projects that I've tried).

Since the command above works, there is no need [*] for using a separate
~phpunit.xml~ file, even better: most testing frameworks have an option to set
the bootstrap file manually, so we can easily change the file when testing a
mutation.

Though Humbug also uses a bootstrap file to inject the mutation, there is a
small difference here.
Humbug stores the mutated code in a temporary file and uses the
~Humbug\StreamWrapper\IncludeInterceptor~ class to intercept the loading of the
original class and replace it with the original.
This might be a more stable approach than simply evalling the mutated code since
this approach won't break when manually including files.

[*] This may not be true: currently we have no way of filtering tests based on
their code coverage since previously this was done using the ~phpunit.mxl~ file.
However instead of using a configuration file we might be able to use pipes like
we're doing with STDIN.

** Improving testing speed

Humbug has some really nice options that decrease the testing time of the
mutation, including,

- Prioritizing fast tests by sorting tests based on execution speed
- Only using tests that execute the mutated code

I believe the first point is not necessarily the responsibility of a mutation
testing tool, but could be used in any project.
